{"ast":null,"code":"import _classCallCheck from \"/Users/Vinesh/Documents/SEPTECH-3.0/frontend/todo-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Vinesh/Documents/SEPTECH-3.0/frontend/todo-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Vinesh/Documents/SEPTECH-3.0/frontend/todo-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Vinesh/Documents/SEPTECH-3.0/frontend/todo-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Vinesh/Documents/SEPTECH-3.0/frontend/todo-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/Vinesh/Documents/SEPTECH-3.0/frontend/todo-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/Vinesh/Documents/SEPTECH-3.0/frontend/todo-app/src/components/Wall/ListPosts.jsx\";\nimport React, { Component } from 'react';\nimport PostService from '../../api/todo/PostService.js';\nimport AuthenticationService from '../todo/AuthenticationService';\nimport moment from 'moment';\nimport './WallStyles.css';\nimport UserWall from './UserWall.jsx';\nimport AppMenu from '../sept/AppMenu.jsx';\n\nvar ListPost =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ListPost, _Component);\n\n  function ListPost(props) {\n    var _this;\n\n    _classCallCheck(this, ListPost);\n\n    console.log('constructor');\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ListPost).call(this, props));\n    _this.state = {\n      posts: [],\n      message: null\n    };\n    _this.deletePostClicked = _this.deletePostClicked.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updatePostClicked = _this.updatePostClicked.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.addPostClicked = _this.addPostClicked.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.refreshPosts = _this.refreshPosts.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(ListPost, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      console.log('componentWillUnmount');\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      console.log('shouldComponentUpdate');\n      console.log(nextProps);\n      console.log(nextState);\n      return true;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log('componentDidMount');\n      this.refreshPosts();\n      console.log(this.state);\n    }\n  }, {\n    key: \"refreshPosts\",\n    value: function refreshPosts() {\n      var _this2 = this;\n\n      var username = AuthenticationService.getLoggedInUserName();\n      PostService.retrieveAllPosts(username).then(function (response) {\n        //console.log(response);\n        _this2.setState({\n          posts: response.data\n        });\n      });\n    }\n  }, {\n    key: \"deletePostClicked\",\n    value: function deletePostClicked(id) {\n      var _this3 = this;\n\n      var username = AuthenticationService.getLoggedInUserName(); //console.log(id + \" \" + username);\n\n      PostService.deletePost(username, id).then(function (response) {\n        _this3.setState({\n          message: \"Delete of post \".concat(id, \" Successful\")\n        });\n\n        _this3.refreshPosts();\n      });\n    }\n  }, {\n    key: \"addPostClicked\",\n    value: function addPostClicked() {\n      this.props.history.push(\"/posts/-1\");\n    }\n  }, {\n    key: \"updatePostClicked\",\n    value: function updatePostClicked(id) {\n      console.log('update ' + id);\n      this.props.history.push(\"/posts/\".concat(id)); // /todos/${id}\n      // let username = AuthenticationService.getLoggedInUserName()\n      // //console.log(id + \" \" + username);\n      // TodoDataService.deleteTodo(username, id)\n      //  .then (\n      //      response => {\n      //         this.setState({message : `Delete of todo ${id} Successful`})\n      //         this.refreshTodos()\n      //      }\n      //  )\n    }\n  }, {\n    key: \"createNewPost\",\n    value: function createNewPost() {\n      var _this4 = this;\n\n      var username = AuthenticationService.getLoggedInUserName();\n      var post = {\n        id: -1,\n        description: document.getElementById('descri').value,\n        targetDate: moment(new Date()).format('YYYY-MM-DD'),\n        targetTime: moment(new Time()).format('HH:MM')\n      };\n      PostService.createPost(username, post).then(function () {\n        return _this4.refreshPosts();\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      console.log('render');\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"container center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(AppMenu, {\n        link: \"User Posts\",\n        history: this.props.history,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"container center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"status-update-input-box\",\n        align: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        type: \"text\",\n        placeholder: \"What's on your mind?\",\n        name: \"description\",\n        id: \"descri\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"post-button\",\n        onClick: function onClick() {\n          return _this5.createNewPost();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"Post now\")))), React.createElement(\"div\", {\n        className: \"container center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"post-container-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, this.state.posts.map(function (post) {\n        return React.createElement(\"div\", {\n          className: \"post-container\",\n          key: post.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121\n          },\n          __self: this\n        }, React.createElement(\"strong\", {\n          className: \"username\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        }, post.username), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }, post.description), React.createElement(\"div\", {\n          className: \"date\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        }, moment(post.targetDate).format('YYYY-MM-DD')), React.createElement(\"div\", {\n          className: \"date\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        }, moment(post.targetTime).format('HH:MM')), React.createElement(\"button\", {\n          className: \"btn-update\",\n          onClick: function onClick() {\n            return _this5.updatePostClicked(post.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        }, \"Update\"), React.createElement(\"button\", {\n          className: \"btn-delete\",\n          onClick: function onClick() {\n            return _this5.deletePostClicked(post.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127\n          },\n          __self: this\n        }, \"Delete\"));\n      }))));\n    }\n  }]);\n\n  return ListPost;\n}(Component);\n\nexport default ListPost;","map":{"version":3,"sources":["/Users/Vinesh/Documents/SEPTECH-3.0/frontend/todo-app/src/components/Wall/ListPosts.jsx"],"names":["React","Component","PostService","AuthenticationService","moment","UserWall","AppMenu","ListPost","props","console","log","state","posts","message","deletePostClicked","bind","updatePostClicked","addPostClicked","refreshPosts","nextProps","nextState","username","getLoggedInUserName","retrieveAllPosts","then","response","setState","data","id","deletePost","history","push","post","description","document","getElementById","value","targetDate","Date","format","targetTime","Time","createPost","createNewPost","map"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport PostService from '../../api/todo/PostService.js'\nimport AuthenticationService from '../todo/AuthenticationService'\nimport moment from 'moment'\nimport './WallStyles.css'\nimport UserWall from './UserWall.jsx';\nimport AppMenu from '../sept/AppMenu.jsx'\n\nclass ListPost extends Component {\n    constructor(props) {\n        console.log('constructor')\n        super(props)\n        this.state = {\n            posts: [],\n            message: null\n        }\n        this.deletePostClicked = this.deletePostClicked.bind(this)\n        this.updatePostClicked = this.updatePostClicked.bind(this)\n        this.addPostClicked = this.addPostClicked.bind(this)\n        this.refreshPosts = this.refreshPosts.bind(this)\n    }\n\n    componentWillUnmount() {\n        console.log('componentWillUnmount')\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        console.log('shouldComponentUpdate')\n        console.log(nextProps)\n        console.log(nextState)\n        return true\n    }\n\n    componentDidMount() {\n        console.log('componentDidMount')\n        this.refreshPosts();\n        console.log(this.state)\n    }\n\n    refreshPosts() {\n        let username = AuthenticationService.getLoggedInUserName()\n        PostService.retrieveAllPosts(username)\n            .then(\n                response => {\n                    //console.log(response);\n                    this.setState({ posts: response.data })\n                }\n            )\n    }\n\n    deletePostClicked(id) {\n        let username = AuthenticationService.getLoggedInUserName()\n        //console.log(id + \" \" + username);\n        PostService.deletePost(username, id)\n            .then(\n                response => {\n                    this.setState({ message: `Delete of post ${id} Successful` })\n                    this.refreshPosts()\n                }\n            )\n\n    }\n\n    addPostClicked() {\n        this.props.history.push(`/posts/-1`)\n    }\n\n    updatePostClicked(id) {\n        console.log('update ' + id)\n        this.props.history.push(`/posts/${id}`)\n        // /todos/${id}\n        // let username = AuthenticationService.getLoggedInUserName()\n        // //console.log(id + \" \" + username);\n        // TodoDataService.deleteTodo(username, id)\n        //  .then (\n        //      response => {\n        //         this.setState({message : `Delete of todo ${id} Successful`})\n        //         this.refreshTodos()\n        //      }\n        //  )\n\n    }\n\n    createNewPost() {\n        let username = AuthenticationService.getLoggedInUserName()\n\n        let post = {\n            id: -1,\n            description: document.getElementById('descri').value,\n            targetDate: moment(new Date()).format('YYYY-MM-DD'),\n            targetTime: moment(new Time()).format('HH:MM')\n        }\n\n        PostService.createPost(username, post)\n            .then(() => this.refreshPosts())\n    }\n\n    render() {\n        console.log('render')\n        return (\n            <div>\n                <div className=\"container center\">\n                    <AppMenu link=\"User Posts\" history={this.props.history} />\n                </div>\n                {/* <div className=\"row\">\n                         <button className=\"btn-new-post\" onClick={this.addPostClicked}>New Post</button>\n                </div> */}\n                <div>\n                    <div className=\"container center\">\n                        <div className=\"status-update-input-box\" align=\"center\">\n                            <textarea type=\"text\" placeholder=\"What's on your mind?\" name=\"description\" id=\"descri\" />\n                            <button className=\"post-button\" onClick={() => this.createNewPost()}>Post now</button>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"container center\">\n                    <div className=\"post-container-container\">\n                        {\n                            this.state.posts.map(\n                                post =>\n                                    <div className=\"post-container\" key={post.id}>\n                                        <strong className=\"username\">{post.username}</strong>\n                                        <p>{post.description}</p>\n                                        <div className=\"date\">{moment(post.targetDate).format('YYYY-MM-DD')}</div>\n                                        <div className=\"date\">{moment(post.targetTime).format('HH:MM')}</div>\n                                        <button className=\"btn-update\" onClick={() => this.updatePostClicked(post.id)}>Update</button>\n                                        <button className=\"btn-delete\" onClick={() => this.deletePostClicked(post.id)}>Delete</button>\n                                    </div>\n                            )\n                        }\n                    </div>\n                </div>\n            </div>\n\n        )\n    }\n}\n\nexport default ListPost"]},"metadata":{},"sourceType":"module"}